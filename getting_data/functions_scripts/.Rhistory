merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e9>",replacement="é")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e9>",replacement="é")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e1>",replacement="á")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e8>",replacement="e")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<fa>",replacement="ú")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<f1>",replacement="n")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<f3>",replacement="ó")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e0>",replacement="á")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e0>",replacement="á")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<ed>",replacement="í")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<eb>",replacement="e")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<eb>",replacement="e")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<f6>",replacement="o")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<fc>",replacement="u")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<ef>",replacement="i")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<ef>",replacement="i")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<d6>",replacement="O")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<f8>",replacement="o")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<f5>",replacement="o")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e5>",replacement="a")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<c1>",replacement="Á")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e4>",replacement="a")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e3>",replacement="a")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e3>",replacement="a")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<df>",replacement="ss")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<e7>",replacement="c")
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="<c7>",replacement="c")
merged_gw$name <- sapply(merged_gw$name,remove_numbers)
merged_gw$name <- sapply(merged_gw$name,remove_numbers)
merged_gw$name <- sapply(merged_gw$name,gsub,pattern="_",replacement=" ")
merged_gw <- set_local_team_name(merged_gw,players_teams_catalog)
names( merged_gw)
#Modificamos la columna del nombre del equipo oponente
merged_gw_formatted <- set_opponent_team_name(merged_gw,players_teams_catalog)
names(merged_gw_formatted)
#Homologamos el nombre de los equipos con los demas dfs
merged_gw_formatted$team_name <- as.character(merged_gw_formatted$team_name)
merged_gw_formatted$opponent_team <- as.character(merged_gw_formatted$opponent_team)
merged_gw_formatted$team_name[is.na(merged_gw_formatted$team_name)] <- ""
merged_gw_formatted$opponent_team[is.na(merged_gw_formatted$opponent_team)] <- ""
merged_gw_formatted$team_name <- sub_value_df(merged_gw_formatted$team_name,'Brighton','Brighton & Hove Albion')
merged_gw_formatted$team_name <- sub_value_df(merged_gw_formatted$team_name,'Leicester','Leicester City')
merged_gw_formatted$team_name <- sub_value_df(merged_gw_formatted$team_name,'Man City','Manchester City')
merged_gw_formatted$team_name <- sub_value_df(merged_gw_formatted$team_name,'Man Utd','Manchester United')
merged_gw_formatted$team_name <- sub_value_df(merged_gw_formatted$team_name,'Norwich','Norwich City')
merged_gw_formatted$team_name <- sub_value_df(merged_gw_formatted$team_name,'Sheffield Utd','Sheffield United')
merged_gw_formatted$team_name <- sub_value_df(merged_gw_formatted$team_name,'Spurs','Tottenham Hotspur')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Bournemouth','AFC Bournemouth')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Brighton','Brighton & Hove Albion')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Leicester','Leicester City')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Man City','Manchester City')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Man Utd','Manchester United')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Norwich','Norwich City')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Sheffield Utd','Sheffield United')
merged_gw_formatted$opponent_team <- sub_value_df(merged_gw_formatted$opponent_team,'Spurs','Tottenham Hotspur')
#Creamos columnas auxiliares nuevas para hacer más fácil la comparación
merged_gw_formatted['bs_t'] <- sapply(merged_gw_formatted$team_name, is_big_six)
#Creamos columnas auxiliares nuevas para hacer más fácil la comparación
merged_gw_formatted['bs_t'] <- sapply(merged_gw_formatted$team_name, is_big_six)
merged_gw_formatted['bs_ot'] <- sapply(merged_gw_formatted$opponent_team, is_big_six)
#Creamos columnas auxiliares nuevas para hacer más fácil la comparación
merged_gw_formatted['bs_t'] <- sapply(merged_gw_formatted$team_name, is_big_six)
merged_gw_formatted['bs_ot'] <- sapply(merged_gw_formatted$opponent_team, is_big_six)
#aplicamos las reglas para big_six
merged_gw_formatted['big_six_h'] <- if_else((merged_gw_formatted$bs_t == 1 & merged_gw_formatted$was_home == 'True') | (merged_gw_formatted$bs_ot == 1 & merged_gw_formatted$was_home == 'False'),1,0)
#aplicamos las reglas para big_six
merged_gw_formatted['big_six_h'] <- if_else((merged_gw_formatted$bs_t == 1 & merged_gw_formatted$was_home == 'True') | (merged_gw_formatted$bs_ot == 1 & merged_gw_formatted$was_home == 'False'),1,0)
merged_gw_formatted['big_six_a'] <- if_else((merged_gw_formatted$bs_t == 1 & merged_gw_formatted$was_home == 'False') | (merged_gw_formatted$bs_ot == 1 & merged_gw_formatted$was_home == 'True'),1,0)
merged_gw_formatted['big_six'] <- if_else(merged_gw_formatted$big_six_h == 1 | merged_gw_formatted$big_six_a == 1,1,0)
#eliminamos las columnas auxiliares
merged_gw_formatted <- merged_gw_formatted %>% select(.,-c('bs_t','bs_ot'))
#declaramos la ruta final de la tabla
ruta_final_pl_merged_gw <- paste(ruta_guardado,'fpl_merged_gw.csv',sep = "")
#Lo escribimos
write_csv(merged_gw_formatted,ruta_final_pl_merged_gw)
head(merged_gw_formatted)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt",
#       "urltools"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(httr)
library(XML)
library(rvest)
library(xml2)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
#script en donde leemos la data de FiveThirtyEight
source("functions_scripts/df_premier_league.R", local = knitr::knit_global())
#script en donde incluimos las funciones globales (del ambiente)
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#script en donde incluimos las funciones referentes a la tabla pl_overturns
source("functions_scripts/df_pl_overturns.R", local = knitr::knit_global())
#script en donde incluimos las funciones referentes a la tabla pl_stats
source("functions_scripts/df_pl_stats.R", local = knitr::knit_global())
#script en donde incluimos las funciones referentes a la tabla cleaned_merged_seasons
source("functions_scripts/df_cleaned_merged_seasons.R", local = knitr::knit_global())
#script en donde incluimos las funciones referentes a la tabla cleaned_merged_players
source("functions_scripts/df_merged_players.R", local = knitr::knit_global())
#script en donde incluimos las funciones referentes a la tabla cleaned_merged_gw
source("functions_scripts/df_merged_gw.R", local = knitr::knit_global())
#script en donde incluimos las funciones referentes a la tabla poss_stats
source("functions_scripts/df_poss_stats.R", local = knitr::knit_global())
#Agregamos las variables locales
#ruta para guardar tablas finales
ruta_guardado <- get_tables_directory()
#ruta para leer data raw
ruta_raw <- get_raw_directory()
#catalogo de jugadores y equipos por temporada
players_teams_catalog_1617 <- get_players_catalog(ruta_raw,'16/17')
players_teams_catalog_1718 <- get_players_catalog(ruta_raw,'17/18')
players_teams_catalog_1819 <- get_players_catalog(ruta_raw,'18/19')
players_teams_catalog_1920 <- get_players_catalog(ruta_raw,'19/20')
players_teams_catalog_2021 <- get_players_catalog(ruta_raw,'20/21')
players_teams_catalog_2122 <- get_players_catalog(ruta_raw,'21/22')
#Unimos los catálogos de cada temporada en uno solo
players_teams_catalog <- players_teams_catalog_1617 %>% bind_rows(players_teams_catalog_1718) %>% bind_rows(players_teams_catalog_1819) %>% bind_rows(players_teams_catalog_1920) %>% bind_rows(players_teams_catalog_2021) %>% bind_rows(players_teams_catalog_2122)
#leemos la data
poss_stats <- get_poss_stats(ruta_raw)
#hacemos cambio de nombre de los equipos para homologar con demas dfs
poss_stats$team <- sub_value_df(poss_stats$team,'Bournemouth','AFC Bournemouth')
poss_stats$team <- sub_value_df(poss_stats$team,'Brighton','Brighton & Hove Albion')
poss_stats$team <- sub_value_df(poss_stats$team,'Cardiff City','Cardiff')
poss_stats$team <- sub_value_df(poss_stats$team,'Hull City','Hull')
poss_stats$team <- sub_value_df(poss_stats$team,'Leeds United','Leeds')
poss_stats$team <- sub_value_df(poss_stats$team,'Manchester Utd','Manchester United')
poss_stats$team <- sub_value_df(poss_stats$team,'Newcastle Utd','Newcastle')
poss_stats$team <- sub_value_df(poss_stats$team,'Sheffield Utd','Sheffield United')
poss_stats$team <- sub_value_df(poss_stats$team,'Stoke City','Stoke')
poss_stats$team <- sub_value_df(poss_stats$team,'Swansea City','Swansea')
poss_stats$team <- sub_value_df(poss_stats$team,'Tottenham','Tottenham Hotspur')
#declaramos la ruta final de la tabla
ruta_final_poss_stats <- paste(ruta_guardado,'epl_poss_stats.csv',sep = "")
#Lo escribimos
write_csv(poss_stats,ruta_final_poss_stats)
head(poss_stats)
nombres <- ['hola','adios','adiosq']
nombres <- c('hola','adios','adiosq')
nombres[1]
typeof(nombres[1])
paste0('yo te iba a decir que',nombres[1])
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt",
#       "urltools"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(httr)
library(XML)
library(rvest)
library(xml2)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
print('Archivo','1','leido')
print('Archivo leido')
rm(nombres)
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt",
#       "urltools"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(httr)
library(XML)
library(rvest)
library(xml2)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
#script en donde incluimos las funciones globales (del ambiente)
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#ruta para el folder con la data raw de FPL
ruta_fpl <- get_fpl_directory()
#Nombre de los archivos que se actualizaron y se deben enviar a la carpeta del repo propio
files_names <- c('cleaned_merged_seasons.csv',
'2016-17/gws/merged_gw.csv','2016-17/cleaned_players.csv','2016-17/players_raw.csv',
'2017-18/gws/merged_gw.csv','2017-18/cleaned_players.csv','2017-18/players_raw.csv',
'2018-19/gws/merged_gw.csv','2018-19/cleaned_players.csv','2018-19/players_raw.csv',
'2019-20/gws/merged_gw.csv','2019-20/cleaned_players.csv','2019-20/players_raw.csv',
'2020-21/gws/merged_gw.csv','2020-21/cleaned_players.csv','2020-21/players_raw.csv',
'2021-22/gws/merged_gw.csv','2021-22/cleaned_players.csv','2021-22/players_raw.csv')
#Nombre de los archivos con los que se guardarán en el folder del repo propio
nombres_finales <- c('cleaned_merged_seasons.csv',
'merged_gw_1617.csv','cleaned_players_1617.csv','players_raw_1617.csv',
'merged_gw_1718.csv','cleaned_players_1718.csv','players_raw_1718.csv',
'merged_gw_1819.csv','cleaned_players_1819.csv','players_raw_1819.csv',
'merged_gw_1920.csv','cleaned_players_1920.csv','players_raw_1920.csv',
'merged_gw_2021.csv','cleaned_players_2021.csv','players_raw_2021.csv',
'merged_gw_2122.csv','cleaned_players_2122.csv','players_raw_2122.csv')
#ruta para leer data raw
ruta_raw <- get_raw_directory()
#Una vez que ya tenemos los archivos actualizados vía el Git, los subimos a sus respectivas carpetas del repo propio
load_raw_csv(ruta_fpl,files_names,ruta_raw,nombres_finales)
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt",
#       "urltools"))
install.packages("git2r")
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt",
#       "urltools","git2r"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(httr)
library(XML)
library(rvest)
library(xml2)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
library(git2r)
getwd()
#Actualizamos la data vía Git
repo_directory = paste0(getwd(),'/Docs/Fantasy-Premier-League')
repo_directory
#script en donde incluimos las funciones globales (del ambiente)
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#Ruta del repo en general de FPL
ruta_fpl_repo <- get_fpl_repo_directory()
#Lista con credenciales de Git
my_git_credentials <- my_git_credentials()
ruta_fpl_repo
my_git_credentials
#Actualizamos la data vía Git
pull(repo = ruta_fpl_repo,
credentials = cred_user_pass(username = my_git_credentials$username,
password = my_git_credentials$pw))
knitr::opts_chunk$set(echo = TRUE)
#script en donde hacemos el proceso ETL de la data
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#ruta para el file donde hacemos el ETL
ruta_etl <- get_etl_file_directory()
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#script en donde hacemos el proceso ETL de la data
source("VAR_in_PL_GD.Rmd", local = knitr::knit_global())
#script en donde hacemos el proceso ETL de la data
source(paste0(ruta_etl,"VAR_in_PL_GD.Rmd"), local = knitr::knit_global())
paste0(ruta_etl,"VAR_in_PL_GD.Rmd")
ruta_final_etl <- paste0(ruta_etl,"VAR_in_PL_GD.Rmd")
#script en donde hacemos el proceso ETL de la data
source(ruta_final_etl, local = knitr::knit_global())
#script en donde hacemos el proceso ETL de la data
xfun::Rscript_call(
rmarkdown::render,
list(input = ruta_final_etl, output_format = 'pdf_document')
)
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt","urltools","fmsb","devtools","vcd","aplpack","GGally","wesanderson","e1071","viridis","hrbrthemes"))
#devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
install.packages("tinytex")
install.packages("tinytex")
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex()
#script en donde hacemos el proceso ETL de la data
xfun::Rscript_call(
rmarkdown::render,
list(input = ruta_final_etl, output_format = 'pdf_document')
)
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
render_etl_file(will_render = F,ruta_render = ruta_final_etl)
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt","urltools","fmsb","devtools","vcd","aplpack","GGally","wesanderson","e1071","viridis","hrbrthemes","tinytex"))
#devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
#tinytex::install_tinytex()
library(dplyr)
library(ggplot2)
library(tidyr)
library(rvest)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
library(ggradar)
library(scales)
library(tibble)
library(fmsb)
library(vcd)
library(GGally)
library(aplpack)
library(e1071)
library(wesanderson)
library(gridExtra)
library(viridis)
library(hrbrthemes)
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#ruta para el file donde hacemos el ETL
ruta_etl <- get_etl_file_directory()
ruta_final_etl <- paste0(ruta_etl,"VAR_in_PL_GD.Rmd")
#Función para actualizar los datos y hacer el ETL, poner T si se requiere hacerlo
render_etl_file(will_render = F,ruta_render = ruta_final_etl)
View(get_df)
View(get_df)
View(get_df)
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt","urltools","fmsb","devtools","vcd","aplpack","GGally","wesanderson","e1071","viridis","hrbrthemes","tinytex"))
#devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
#tinytex::install_tinytex()
library(dplyr)
library(ggplot2)
library(tidyr)
library(rvest)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
library(ggradar)
library(scales)
library(tibble)
library(fmsb)
library(vcd)
library(GGally)
library(aplpack)
library(e1071)
library(wesanderson)
library(gridExtra)
library(viridis)
library(hrbrthemes)
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#ruta para el file donde hacemos el ETL
ruta_etl <- get_etl_file_directory()
ruta_final_etl <- paste0(ruta_etl,"VAR_in_PL_GD.Rmd")
#Función para actualizar los datos y hacer el ETL, poner T si se requiere hacerlo
render_etl_file(will_render = F,ruta_render = ruta_final_etl)
get_df(9)
df1 <- get_df(9)
names(df1)
dir(df1)
str(df1)
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt","urltools","fmsb","devtools","vcd","aplpack","GGally","wesanderson","e1071","viridis","hrbrthemes","tinytex"))
#devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
#tinytex::install_tinytex()
library(dplyr)
library(ggplot2)
library(tidyr)
library(rvest)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
library(ggradar)
library(scales)
library(tibble)
library(fmsb)
library(vcd)
library(GGally)
library(aplpack)
library(e1071)
library(wesanderson)
library(gridExtra)
library(viridis)
library(hrbrthemes)
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#variable que indica si estoy trabajando en la compu personal o no
is_work_computer = F
#ruta para el file donde hacemos el ETL
ruta_etl <- get_etl_file_directory(is_work_computer)
ruta_final_etl <- paste0(ruta_etl,"VAR_in_PL_GD.Rmd")
#Función para actualizar los datos y hacer el ETL, poner T si se requiere hacerlo
render_etl_file(will_render = F,ruta_render = ruta_final_etl)
knitr::opts_chunk$set(echo = TRUE)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt",
#       "urltools","git2r"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(httr)
library(XML)
library(rvest)
library(xml2)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
library(git2r)
#script en donde incluimos las funciones globales (del ambiente)
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#ruta para guardar tablas finales
ruta_guardado <- get_tables_directory(is_work_computer)
knit_with_parameters("~/Documents/Git_repos/var_epl/getting_data/VAR_in_PL_GD.Rmd")
knit_with_parameters("~/Documents/Git_repos/var_epl/getting_data/VAR_in_PL_GD.Rmd")
#script en donde incluimos las funciones globales (del ambiente)
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#ruta para guardar tablas finales
ruta_guardado <- get_tables_directory(params$is_work_computer)
#ruta para leer data raw
ruta_raw <- get_raw_directory(params$is_work_computer)
#ruta para guardar tablas finales
ruta_guardado <- get_tables_directory(params$is_work_computer)
#ruta para leer data raw
ruta_raw <- get_raw_directory(params$is_work_computer)
#ruta para guardar tablas finales
ruta_guardado <- get_tables_directory(params$is_work_computer)
#ruta para leer data raw
ruta_raw <- get_raw_directory(params$is_work_computer)
#catalogo de jugadores y equipos por temporada
players_teams_catalog_1617 <- get_players_catalog(ruta_raw,'16/17')
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt","urltools","fmsb","devtools","vcd","aplpack","GGally","wesanderson","e1071","viridis","hrbrthemes","tinytex"))
#devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
#tinytex::install_tinytex()
library(dplyr)
library(ggplot2)
library(tidyr)
library(rvest)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
library(ggradar)
library(scales)
library(tibble)
library(fmsb)
library(vcd)
library(GGally)
library(aplpack)
library(e1071)
library(wesanderson)
library(gridExtra)
library(viridis)
library(hrbrthemes)
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#variable que indica si estoy trabajando en la compu personal o no
is_work_computer = F
#ruta para el file donde hacemos el ETL
ruta_etl <- get_etl_file_directory(is_work_computer)
ruta_final_etl <- paste0(ruta_etl,"VAR_in_PL_GD.Rmd")
#Función para actualizar los datos y hacer el ETL, poner T si se requiere hacerlo
render_etl_file(will_render = F,ruta_render = ruta_final_etl,is_work_computer = is_work_computer)
#Función para actualizar los datos y hacer el ETL, poner T si se requiere hacerlo
render_etl_file(will_render = F,ruta_render = ruta_final_etl,is_work_computer = is_work_computer)
#librerias a utilizar
#install.packages(c("dplyr","ggplot2","tidyr","httr","XML","rvest","xml2","tidyverse","robotstxt","urltools","fmsb","devtools","vcd","aplpack","GGally","wesanderson","e1071","viridis","hrbrthemes","tinytex"))
#devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
#tinytex::install_tinytex()
library(dplyr)
library(ggplot2)
library(tidyr)
library(rvest)
library(tidyverse)
library(robotstxt)
library(urltools)
library(methods)
library(ggradar)
library(scales)
library(tibble)
library(fmsb)
library(vcd)
library(GGally)
library(aplpack)
library(e1071)
library(wesanderson)
library(gridExtra)
library(viridis)
library(hrbrthemes)
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#variable para controlar desde donde estoy ejecutando el código
is_work_computer = params$is_work_computer
#ruta para el file donde hacemos el ETL
ruta_etl <- get_etl_file_directory(is_work_computer)
ruta_final_etl <- paste0(ruta_etl,"VAR_in_PL_GD.Rmd")
#Función para actualizar los datos y hacer el ETL, poner T si se requiere hacerlo
render_etl_file(will_render = F,ruta_render = ruta_final_etl,is_work_computer = is_work_computer)
#script en donde leemos las funciones generales para este script
source("functions_scripts/general_functions.R", local = knitr::knit_global())
#Ruta de la carpeta con las imagenes a incluir en el Rmd
ruta_imagenes <- get_images_directory()
#Ruta a la imagen del mapa de xG de The Athletic
ruta_mapa_xg <- paste0(ruta_imagenes,'xg_map.png')
View(get_df)
View(get_df)
df_faltas <- get_df(8) %>% select(c('season','team_name'))
head(df_faltas)
df_faltas <- get_df(8) %>% select(c('season','team_name','opponent_team'))
head(df_faltas)
df_faltas <- get_df(8) %>% select(c('season','team_name','opponent_team','kickoff_time','GW'))
head(df_faltas)
df_faltas <- get_df(8) %>% select(c('season','team_name','opponent_team','kickoff_time','GW','yellow_cards','red_cards','penalties_conceded','own_goals','fouls','goals_conceded'))
head(df_faltas)
df_faltas <- get_df(8) %>% select(c('season','name','team_name','opponent_team','kickoff_time','GW','yellow_cards','red_cards','penalties_conceded','own_goals','fouls','goals_conceded'))
head(df_faltas)
df_faltas <- get_df(8) %>% select(c('season','team_name','opponent_team','kickoff_time','GW','yellow_cards','red_cards','penalties_conceded','own_goals','fouls','goals_conceded','completed_passes','key_passes','xP','open_play_crosses'))
head(df_faltas)
df_faltas <- get_df(8) %>% select(c('season','team_name','opponent_team','kickoff_time','GW','yellow_cards','red_cards','penalties_conceded','own_goals','fouls','goals_conceded','completed_passes','key_passes','xP','open_play_crosses','attempted_passes'))
head(df_faltas)
#Leemos el df de done obtendremos el xG de los equipos
df_xg <- get_df(1) %>% select(c('season','date','team1','team2','xg1','xg2'))
head(df_xg)
